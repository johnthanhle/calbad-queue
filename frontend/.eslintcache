[{"/Users/asty111/Desktop/Work/Uni/WebStuff/queue/court-queue/frontend/src/App.jsx":"1"},{"size":4680,"mtime":1608423768576,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1eayxss","/Users/asty111/Desktop/Work/Uni/WebStuff/queue/court-queue/frontend/src/App.jsx",["7"],"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Cookies from \"js-cookie\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport AdminView from \"./AdminView\";\nimport PlayerView from \"./PlayerView\";\n\nlet ws = new WebSocket(\"ws://localhost:8888/\");\nconst WS_RETRY_TIME = 5000;\n\ntoast.configure({ draggable: false, autoClose: 8000 });\n\nconst DEFAULT_USER = { uid: -1, name: \"No Name Provided\" };\n\nfunction App() {\n  const [user, setUser] = useState();\n  const [users, setUsers] = useState([]);\n  const [wsConnected, setWsConnected] = useState(false);\n\n  const genRandID = () => {\n    return Math.floor(Math.random() * 1000);\n  };\n\n  const wsReconnect = () => {\n    setTimeout(() => {\n      console.log(\"WS - attempt reconnect\");\n      if (ws.readyState === WebSocket.CLOSED) {\n        ws = new WebSocket(\"ws://localhost:8888/\");\n        if (ws.readyState !== WebSocket.OPEN) {\n          console.log(\"WS - failed reconnect\");\n          wsReconnect();\n        } else {\n          console.log(\"WS - successfully connected\");\n        }\n      } else if (ws.readyState === WebSocket.OPEN) {\n        console.log(\"WS - successfully connected, attaching handlers\");\n        attachWSHandlers(ws);\n        // Set manually here because handlers weren't connected in time to catch open\n        setWsConnected(true);\n        ws.send(JSON.stringify({ type: \"request\", value: \"queue\" }));\n      }\n    }, WS_RETRY_TIME);\n  };\n\n  const wsSend = msg => {\n    ws.send(msg);\n  };\n\n  const attachWSHandlers = client => {\n    client.addEventListener(\"open\", function(event) {\n      console.log(\"WS Open\");\n      setWsConnected(true);\n    });\n    client.addEventListener(\"close\", function(event) {\n      console.log(\"WS Close\");\n      setWsConnected(false);\n      wsReconnect();\n    });\n    client.addEventListener(\"message\", function(event) {\n      const msg = JSON.parse(event.data);\n      console.log(event);\n      if (msg.type === \"queue\") {\n        if (!Array.isArray(msg.value)) {\n          console.log(\"WS ERROR: queue not array\");\n          setUsers([]);\n        } else {\n          const newUsers = msg.value;\n          setUsers(newUsers);\n        }\n      } else if (msg.type === \"notification\") {\n        // Check to make sure msg is correct\n        let notifContent = msg.notifContent;\n        if (!notifContent) {\n          console.log(\"Missing notifcontent\");\n          return;\n        }\n        let n = new Notification(notifContent.title, {\n          body: notifContent.body || \"\"\n        });\n        n.onclick = () => {\n          console.log(\"Notif click, goto: \" + notifContent.link);\n          window.open(notifContent.link, \"_blank\");\n        };\n        toast.success(notifContent.title);\n      } else if (msg.type === \"ping\") {\n        let pingMsgResp = JSON.stringify({\n          type: \"pingres\",\n          timestamp: new Date(),\n          id: msg.id\n        });\n        ws.send(pingMsgResp);\n      }\n    });\n  };\n\n  // Update websocket record in backend\n  useEffect(() => {\n    // Make sure user is set and websocket is connected\n    if (user && wsConnected) {\n      ws.send(\n        JSON.stringify({\n          type: \"updateid\",\n          uid: user.uid\n        })\n      );\n    }\n  }, [user, wsConnected]);\n\n  useEffect(() => {\n    if (!Cookies.get(\"user\")) {\n      Cookies.set(\n        \"user\",\n        { uid: genRandID(), name: DEFAULT_USER.name },\n        { expires: 7 }\n      );\n    }\n    setUser(JSON.parse(Cookies.get(\"user\")));\n    attachWSHandlers(ws);\n    Notification.requestPermission().then(function(result) {\n      console.log(\"Notif request perm: \" + result);\n      if (result !== \"granted\") {\n        toast.error(\"Please allow notifications and refresh the page!\");\n      }\n    });\n  }, []);\n\n  /* TODO Notifications:\n        - If device doesnt support notifications (prop: notSupported)\n        - If user declines notifications (prop: onPermissionDenied, askAgain=true to request again)\n        - props.options (body, tag, icon)\n  */\n\n  const updateUser = newUser => {\n    console.log(\"NEW USER: \", newUser);\n    Cookies.set(\"user\", newUser, { expires: 7 });\n    setUser(newUser);\n  };\n\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route path=\"/calbadofficer\">\n            <AdminView user={user} users={users} ws={ws} />\n          </Route>\n          <Route path=\"/\">\n            <PlayerView\n              user={user}\n              users={users}\n              userUpdateFunction={updateUser}\n              wsSend={wsSend}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;",{"ruleId":"8","severity":1,"message":"9","line":127,"column":6,"nodeType":"10","endLine":127,"endColumn":8,"suggestions":"11"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'attachWSHandlers'. Either include it or remove the dependency array.","ArrayExpression",["12"],{"desc":"13","fix":"14"},"Update the dependencies array to be: [attachWSHandlers]",{"range":"15","text":"16"},[3820,3822],"[attachWSHandlers]"]